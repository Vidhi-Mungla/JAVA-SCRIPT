1) What is JavaScript?

==> JavaScript is a high-level, interpreted programming language primarily used to add interactivity and dynamic content to web pages. It is commonly used for client-side
 scripting to manipulate web page elements, handle events, and communicate with web servers. JavaScript is supported by all modern web browsers and has become an essential 
 part of web development.
 
 
 2) What is the use of the isNaN function?
 
==> The 'isNaN' function in JavaScript is used to determine whether a given value is "Not a Number" (NaN) or can be converted into a valid number. It returns 'true' if the value 
is not a valid number, and 'false' if it is a number or can be converted into one.


3) What is negative Infinity?

==> In JavaScript, 'Negative Infinity' is a special value representing a number that is infinitely small (i.e., smaller than any negative number). It is the result of mathematical
 operations that produce very small or very large values, which cannot be accurately represented using the number data type.
 
 
 4) Which company developed JavaScript?
 
==> JavaScript was developed by Netscape Communications Corporation. Brendan Eich, a Netscape employee, created the language in 1995. Initially, it was named "Mocha" and 
later "LiveScript" before finally settling on "JavaScript."


5) What are undeclared and undefined variables?

==> * Undeclared variables: These are variables that have been used in the code without being declared using the var, let, or const keyword. Accessing an undeclared variable will result in a ReferenceError.
    * Undefined variables: These are variables that have been declared but have not been assigned a value. They have a default value of undefined until they are assigned a valid value.
	
6) Write the code for adding new elements dynamically?
==> an example of how to add a new element (e.g., a new paragraph) dynamically to the DOM using JavaScript:	

* example *

<!DOCTYPE html>
<html>
<head>
    <title>Dynamic Element Addition</title>
</head>
<body>
    <div id="container">
    </div>

    <script>
        const newParagraph = document.createElement('p');
        
        newParagraph.textContent = 'This is a dynamically added paragraph!';
        
        document.getElementById('container').appendChild(newParagraph);
    </script>
</body>
</html>


7) What is the difference between ViewState and SessionState?
==> ViewState and SessionState are both mechanisms used in web development, particularly in ASP.NET.

ViewState: It is used to store the state of a web page on the client-side. The data is typically encrypted and sent along with the page's HTML, which allows the server to
 reconstruct the state when the page is posted back. ViewState is suitable for storing small amounts of data specific to a single web page.
 
SessionState: It is used to store data on the server-side, associated with a user's session. The data is stored on the server and can be accessed across multiple pages during 
a user's session. SessionState is useful for maintaining larger amounts of data throughout a user's interaction with the web application.


8) What is the === operator?

==> The === operator is the strict equality operator in JavaScript. It is used to compare two values for equality without performing type coercion. This means that not only do 
the values need to be the same, but their types must also match. If the types are different, the === operator will return false.

9) How can the style/class of an element be changed?
==> You can change the style or class of an element in JavaScript using the style property or the classList property. examples:

* Using the style property:

const element = document.getElementById('myElement');
element.style.color = 'red';
element.style.fontSize = '20px';


* Using the classList property to add/remove classes:

const element = document.getElementById('myElement');
element.classList.add('new-class');
element.classList.remove('old-class');


10)How to read and write a file using JavaScript?
==> In a browser environment, JavaScript alone cannot read or write files directly due to security restrictions. However, you can interact with files indirectly through APIs
 provided by the File API and FileReader API for reading files from user input.

On the server-side (Node.js environment), you can use the built-in fs module to read and write files. Here's a basic example of reading a file using Node.js:

* example

const fs = require('fs');

fs.readFile('file.txt', 'utf8', (err, data) => {
    if (err) {
        console.error('Error reading the file:', err);
        return;
    }
    console.log('File content:', data);
});



11) What are all the looping structures in JavaScript?
==> JavaScript provides several looping structures:

* for loop: Executes a block of code for a specified number of times.
* while loop: Repeatedly executes a block of code as long as the specified condition is true.
* do...while loop: Similar to the while loop, but it ensures that the code block is executed at least once before checking the condition.
* for...in loop: Used to iterate over the properties of an object.
* for...of loop: Used to iterate over iterable objects like arrays and strings.

12)How can you convert the string of any base to an integer in JavaScript?
==> You can use the parseInt function to convert a string representing a number in a specific base to an integer. The parseInt function takes two arguments: the string to be 
converted and the base of the number system. Here's an example to convert a binary string to an integer:

* example

const binaryString = '101010';
const decimalNumber = parseInt(binaryString, 2);
console.log(decimalNumber); // Output: 42


13)What is the function of the delete operator?
==> The delete operator in JavaScript is used to remove a property from an object. It can also be used to delete elements from an array. However, it cannot be used to delete 
variables declared using var, let, or const.

Example with an object:

const person = 
{
    name: 'John',
    age: 30,
};

delete person.age;


14) What are all the types of Pop up boxes available in JavaScript?
==> JavaScript provides three types of popup boxes:

1: alert: Displays a simple message box with an "OK" button.
2: confirm: Displays a message box with "OK" and "Cancel" buttons, and the user can choose between them.
3: prompt: Displays a message box with an input field where the user can enter text, along with "OK" and "Cancel" buttons.



15)What is the use of Void (0)?
==> In JavaScript, void(0) is often used as a placeholder value for the href attribute of anchor (<a>) tags to prevent the page from navigating to a new URL when the
 link is clicked. When void(0) is used as the value of href, clicking the link won't cause any navigation action, essentially doing nothing. This is frequently used in event 
 handlers or to prevent unwanted page reloads.
 
* Example:

<a href="javascript:void(0);" onclick="doSomething()">Click Me</a>



16) How can a page be forced to load another page in JavaScript?
==> To force a page to load another page in JavaScript, you can use the window.location object, specifically the window.location.href property, which represents the current URL.
 By setting this property to the desired URL, the page will navigate to the specified location.
 
* Example:

document.getElementById("myButton").addEventListener("click", function() {
  window.location.href = "https://www.example.com/newpage";
});



17) What are the disadvantages of using innerHTML in JavaScript?
==>1) Security risks: Using innerHTML can expose your web application to potential security vulnerabilities like cross-site scripting (XSS) attacks if the content being inserted 
contains user-generated or untrusted data.

2) Performance overhead: When you use innerHTML, the browser must parse the HTML string you provide, which can be slower and less efficient than other DOM manipulation methods
 like textContent.

3) Event listeners: If the content inserted via innerHTML contains elements with event listeners, those listeners might not work as expected, especially if you're replacing the 
entire content of an element.


18) Create password field with show hide functionalities.
==>
* example

<!DOCTYPE html>
<html>
<head>
  <title>Password Field with Show/Hide</title>
  <style>
  
    .password-wrapper {
      position: relative;
    }
    .password-toggle {
      position: absolute;
      top: 50%;
      right: 10px;
      transform: translateY(-50%);
      cursor: pointer;
    }
  </style>
</head>
<body>
  <div class="password-wrapper">
    <input type="password" id="passwordInput" placeholder="Enter password">
    <span class="password-toggle" onclick="togglePasswordVisibility()">Show</span>
  </div>

  <script>
    function togglePasswordVisibility() {
      var passwordInput = document.getElementById("passwordInput");
      var passwordToggle = document.querySelector(".password-toggle");

      if (passwordInput.type === "password") {
        passwordInput.type = "text";
        passwordToggle.textContent = "Hide";
      } else {
        passwordInput.type = "password";
        passwordToggle.textContent = "Show";
      }
    }
  </script>
</body>
</html>

